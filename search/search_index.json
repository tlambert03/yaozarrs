{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>yaozarrs!!</p> Yet Another Ome-ZARR Schema! <p>Pydantic models for the OME-Zarr specification.</p> <p>Warning</p> <p>This is an experimental project.  Playing with a bottom-up design, starting with the OME-Zarr specification for JSON documents expressed as models.  </p> <p>See first: </p> <p>ome-zarr-models-py,  which is more of a top-down design, starting from a <code>zarr.Group</code>, and  validating the metadata within.  It has the community buy in and you should probably start there.</p>"},{"location":"reference/yaozarrs/","title":"yaozarrs","text":""},{"location":"reference/yaozarrs/#yaozarrs","title":"yaozarrs","text":"<p>Yet another ome-zarr model.</p> <p>Modules:</p> <ul> <li> <code>v04</code>           \u2013            <p>v04 ome-zarr model.</p> </li> <li> <code>v05</code>           \u2013            <p>v05 ome-zarr model.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>from_uri</code>             \u2013              <p>Load and validate any OME-Zarr group from a URI or local path.</p> </li> <li> <code>validate_ome_json</code>             \u2013              <p>Validate any valid ome-zarr JSON data.</p> </li> <li> <code>validate_ome_object</code>             \u2013              <p>Validate any ome-zarr document or node as a python object.</p> </li> <li> <code>validate_zarr_store</code>             \u2013              <p>Validate an OME-Zarr v0.5 storage structure.</p> </li> </ul>"},{"location":"reference/yaozarrs/#yaozarrs.from_uri","title":"from_uri","text":"<pre><code>from_uri(uri: str | PathLike, cls: type[T]) -&gt; T\n</code></pre><pre><code>from_uri(uri: str | PathLike) -&gt; AnyOMEGroup\n</code></pre> <pre><code>from_uri(\n    uri: str | PathLike, cls: type[T] | Any = None\n) -&gt; T | AnyOMEGroup\n</code></pre> <p>Load and validate any OME-Zarr group from a URI or local path.</p> <p>This function will attempt to load the OME-Zarr group metadata from the given URI or local path. It supports both v0.4 and v0.5 of the OME-Zarr specification. The URI should be a path to a zarr group (directory or URL) with valid ome-zarr metadata, or a path directly to the metadata JSON file itself (e.g. zarr.json or .zattrs).</p> <p>This requires that you have installed yaozarrs with the <code>io</code> extra, e.g. <code>pip install yaozarrs[io]</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>AnyOME</code>           \u2013            <p>An instance of <code>v05.OMEZarrGroupJSON</code>, <code>v04.OMEZarrGroupJSON</code>, or another valid OME-Zarr node type, depending on the object detected.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>             \u2013            <p>If the URI does not point to a valid OME-Zarr group.</p> </li> <li> <code>ValidationError</code>             \u2013            <p>If the loaded metadata is not valid according to the OME-Zarr specification.</p> </li> </ul> Source code in <code>src/yaozarrs/_validate.py</code> <pre><code>def from_uri(uri: str | os.PathLike, cls: type[T] | Any = None) -&gt; T | AnyOMEGroup:\n    \"\"\"Load and validate any OME-Zarr group from a URI or local path.\n\n    This function will attempt to load the OME-Zarr group metadata from the given\n    URI or local path. It supports both v0.4 and v0.5 of the OME-Zarr specification.\n    The URI should be a path to a zarr group (directory or URL) with valid ome-zarr\n    metadata, or a path directly to the metadata JSON file itself (e.g. zarr.json or\n    .zattrs).\n\n    This requires that you have installed yaozarrs with the `io` extra, e.g.\n    `pip install yaozarrs[io]`.\n\n    Parameters\n    ----------\n    uri : str | os.PathLike\n        The URI or local path to the OME-Zarr group. This can be a file path,\n        a directory path, or a URL.\n    cls : type[T]\n        The class to validate against. Must be a subclass of `BaseModel`.\n\n    Returns\n    -------\n    AnyOME\n        An instance of `v05.OMEZarrGroupJSON`, `v04.OMEZarrGroupJSON`, or another\n        valid OME-Zarr node type, depending on the object detected.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the URI does not point to a valid OME-Zarr group.\n    pydantic.ValidationError\n        If the loaded metadata is not valid according to the OME-Zarr specification.\n    \"\"\"\n    from ._io import read_json_from_uri\n\n    json_content, uri_str = read_json_from_uri(uri)\n    obj = validate_ome_json(json_content, cls or AnyOMEGroup)\n    obj.uri = uri_str\n    return obj\n</code></pre>"},{"location":"reference/yaozarrs/#yaozarrs.from_uri(uri)","title":"<code>uri</code>","text":"(<code>str | PathLike</code>)           \u2013            <p>The URI or local path to the OME-Zarr group. This can be a file path, a directory path, or a URL.</p>"},{"location":"reference/yaozarrs/#yaozarrs.from_uri(cls)","title":"<code>cls</code>","text":"(<code>type[T]</code>, default:                   <code>None</code> )           \u2013            <p>The class to validate against. Must be a subclass of <code>BaseModel</code>.</p>"},{"location":"reference/yaozarrs/#yaozarrs.validate_ome_json","title":"validate_ome_json","text":"<pre><code>validate_ome_json(\n    data: str | bytes | bytearray, cls: type[T]\n) -&gt; T\n</code></pre><pre><code>validate_ome_json(data: str | bytes | bytearray) -&gt; AnyOME\n</code></pre> <pre><code>validate_ome_json(\n    data: str | bytes | bytearray, cls: type[T] | Any = None\n) -&gt; T | AnyOME\n</code></pre> <p>Validate any valid ome-zarr JSON data.</p> <p>By default, this will validate <code>data</code> against all known OME JSON documents. This includes ome-zarr group documents for v04 (found at .zattrs in the zarr group) and v05 (found at zarr.json in the zarr group).  For v05 objects, it also detects data that would valid as the value of the <code>data[\"attributes\"][\"ome\"]</code> key inside a v05 zarr.json document.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>If the validation fails.</p> </li> </ul> Source code in <code>src/yaozarrs/_validate.py</code> <pre><code>def validate_ome_json(\n    data: str | bytes | bytearray, cls: type[T] | Any = None\n) -&gt; T | AnyOME:\n    \"\"\"Validate any valid ome-zarr JSON data.\n\n    By default, this will validate `data` against all known OME JSON documents.\n    This includes ome-zarr group documents for v04 (found at .zattrs in the zarr group)\n    and v05 (found at zarr.json in the zarr group).  For v05 objects, it also detects\n    data that would valid as the value of the `data[\"attributes\"][\"ome\"]` key inside\n    a v05 zarr.json document.\n\n    Parameters\n    ----------\n    data : str | bytes | bytearray\n        The OMENode instance to validate.\n    cls : type[T]\n        The class to validate against. Must be a subclass of `BaseModel`.\n        If not provided, defaults to `OMENode`, meaning any valid OME node object\n\n    Raises\n    ------\n    pydantic.ValidationError\n        If the validation fails.\n    \"\"\"\n    adapter = TypeAdapter[T](cls or AnyOME)\n    return adapter.validate_json(data)\n</code></pre>"},{"location":"reference/yaozarrs/#yaozarrs.validate_ome_json(data)","title":"<code>data</code>","text":"(<code>str | bytes | bytearray</code>)           \u2013            <p>The OMENode instance to validate.</p>"},{"location":"reference/yaozarrs/#yaozarrs.validate_ome_json(cls)","title":"<code>cls</code>","text":"(<code>type[T]</code>, default:                   <code>None</code> )           \u2013            <p>The class to validate against. Must be a subclass of <code>BaseModel</code>. If not provided, defaults to <code>OMENode</code>, meaning any valid OME node object</p>"},{"location":"reference/yaozarrs/#yaozarrs.validate_ome_object","title":"validate_ome_object","text":"<pre><code>validate_ome_object(node: Any, cls: type[T]) -&gt; T\n</code></pre><pre><code>validate_ome_object(node: Any) -&gt; AnyOME\n</code></pre> <pre><code>validate_ome_object(\n    node: Any, cls: type[T] | Any = None\n) -&gt; T | AnyOME\n</code></pre> <p>Validate any ome-zarr document or node as a python object.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>If the validation fails.</p> </li> </ul> Source code in <code>src/yaozarrs/_validate.py</code> <pre><code>def validate_ome_object(node: Any, cls: type[T] | Any = None) -&gt; T | AnyOME:\n    \"\"\"Validate any ome-zarr document or node as a python object.\n\n    Parameters\n    ----------\n    node : OMENode\n        The OMENode instance to validate.\n    cls : type[T]\n        The class to validate against. Must be a subclass of `BaseModel`.\n        If not provided, defaults to `OMENode`, meaning any valid OME node object\n\n    Raises\n    ------\n    pydantic.ValidationError\n        If the validation fails.\n    \"\"\"\n    adapter = TypeAdapter[T](cls or AnyOME)\n    return adapter.validate_python(node)\n</code></pre>"},{"location":"reference/yaozarrs/#yaozarrs.validate_ome_object(node)","title":"<code>node</code>","text":"(<code>OMENode</code>)           \u2013            <p>The OMENode instance to validate.</p>"},{"location":"reference/yaozarrs/#yaozarrs.validate_ome_object(cls)","title":"<code>cls</code>","text":"(<code>type[T]</code>, default:                   <code>None</code> )           \u2013            <p>The class to validate against. Must be a subclass of <code>BaseModel</code>. If not provided, defaults to <code>OMENode</code>, meaning any valid OME node object</p>"},{"location":"reference/yaozarrs/#yaozarrs.validate_zarr_store","title":"validate_zarr_store","text":"<pre><code>validate_zarr_store(\n    obj: ZarrGroup | str | Path | Any,\n) -&gt; None\n</code></pre> <p>Validate an OME-Zarr v0.5 storage structure.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>StorageValidationError</code>             \u2013            <p>If the storage structure is invalid.</p> </li> </ul> Source code in <code>src/yaozarrs/_storage.py</code> <pre><code>def validate_zarr_store(obj: ZarrGroup | str | Path | Any) -&gt; None:\n    \"\"\"Validate an OME-Zarr v0.5 storage structure.\n\n    Parameters\n    ----------\n    obj : OMEZarrGroupJSON | ZarrGroup | str | Path | Any\n        The zarr store to validate. Can be a URI string, a Path, a parsed\n        OMEZarrGroupJSON object, a ZarrGroup instance, or a zarr.Group object\n        (for backwards compatibility).\n\n    Raises\n    ------\n    StorageValidationError\n        If the storage structure is invalid.\n    \"\"\"\n    zarr_group = open_group(obj)\n    ome_version = zarr_group.ome_version()\n    if ome_version == \"0.5\":\n        from yaozarrs.v05._storage import StorageValidatorV05\n\n        # Validate the storage structure using the visitor pattern\n        result = StorageValidatorV05.validate_group(zarr_group)\n    else:\n        raise NotImplementedError(\n            f\"Structural validation for OME-Zarr version {ome_version} is \"\n            \"not implemented.\"\n        )\n\n    # Raise error if any validation issues found\n    if not result.is_valid:\n        raise StorageValidationError(result.errors)\n</code></pre>"},{"location":"reference/yaozarrs/#yaozarrs.validate_zarr_store(obj)","title":"<code>obj</code>","text":"(<code>OMEZarrGroupJSON | ZarrGroup | str | Path | Any</code>)           \u2013            <p>The zarr store to validate. Can be a URI string, a Path, a parsed OMEZarrGroupJSON object, a ZarrGroup instance, or a zarr.Group object (for backwards compatibility).</p>"},{"location":"reference/yaozarrs/v04/","title":"v04","text":""},{"location":"reference/yaozarrs/v04/#yaozarrs.v04","title":"yaozarrs.v04","text":"<p>v04 ome-zarr model.</p> <p>https://ngff.openmicroscopy.org/0.4</p> <p>https://github.com/ome/ngff/tree/7ac3430c74a66e5bcf53e41c429143172d68c0a4</p> <p>Classes:</p> <ul> <li> <code>LabelImage</code>           \u2013            <p>Model for individual label images with multiscales + image-label metadata.</p> </li> <li> <code>Multiscale</code>           \u2013            <p>A multiscale representation of an image.</p> </li> <li> <code>PlateWell</code>           \u2013            <p>Individual well in a plate.</p> </li> <li> <code>Series</code>           \u2013            <p>Model for the ome group that contains OME-XML metadata.</p> </li> <li> <code>Well</code>           \u2013            <p>A well at the top-level of an ome-zarr file.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>OMEZarrGroupJSON</code>               (<code>TypeAlias</code>)           \u2013            <p>A .zattrs document found in any ome-zarr group.</p> </li> </ul>"},{"location":"reference/yaozarrs/v04/#yaozarrs.v04.OMEZarrGroupJSON","title":"OMEZarrGroupJSON  <code>module-attribute</code>","text":"<pre><code>OMEZarrGroupJSON: TypeAlias = (\n    LabelImage\n    | Image\n    | Plate\n    | Well\n    | Series\n    | Bf2Raw\n    | LabelsGroup\n)\n</code></pre> <p>A .zattrs document found in any ome-zarr group.</p> <p>OME-ZARR v0.4 uses zarr format version 2: https://zarr-specs.readthedocs.io/en/latest/v2/v2.0.html</p> <p>...where the node-type is defined by the presence of a .zgroup or .zarray file. Either node type may also contain a .zattrs file, and that's where the OME metadata lives, without any top-level key.</p>"},{"location":"reference/yaozarrs/v04/#yaozarrs.v04.LabelImage","title":"LabelImage","text":"<p>               Bases: <code>Image</code></p> <p>Model for individual label images with multiscales + image-label metadata.</p>"},{"location":"reference/yaozarrs/v04/#yaozarrs.v04.Multiscale","title":"Multiscale","text":"<p>               Bases: <code>_BaseModel</code></p> <p>A multiscale representation of an image.</p>"},{"location":"reference/yaozarrs/v04/#yaozarrs.v04.PlateWell","title":"PlateWell","text":"<p>               Bases: <code>_BaseModel</code></p> <p>Individual well in a plate.</p>"},{"location":"reference/yaozarrs/v04/#yaozarrs.v04.Series","title":"Series","text":"<p>               Bases: <code>ZarrGroupModel</code></p> <p>Model for the ome group that contains OME-XML metadata.</p>"},{"location":"reference/yaozarrs/v04/#yaozarrs.v04.Well","title":"Well","text":"<p>               Bases: <code>ZarrGroupModel</code></p> <p>A well at the top-level of an ome-zarr file.</p>"},{"location":"reference/yaozarrs/v05/","title":"v05","text":""},{"location":"reference/yaozarrs/v05/#yaozarrs.v05","title":"yaozarrs.v05","text":"<p>v05 ome-zarr model.</p> <p>https://ngff.openmicroscopy.org/0.5/</p> <p>https://github.com/ome/ngff/tree/8cbba216e37407bd2d4bd5c7128ab13bd0a6404e</p> <p>Classes:</p> <ul> <li> <code>Dataset</code>           \u2013            </li> <li> <code>LabelImage</code>           \u2013            <p>Model for individual label images with multiscales + image-label metadata.</p> </li> <li> <code>LabelsGroup</code>           \u2013            <p>Model for the labels group that contains paths to individual label images.</p> </li> <li> <code>Multiscale</code>           \u2013            <p>A multiscale representation of an image.</p> </li> <li> <code>OMEAttributes</code>           \u2013            <p>The attributes field of a zarr.json document in an ome-zarr group.</p> </li> <li> <code>OMEZarrGroupJSON</code>           \u2013            <p>A zarr.json document found in any ome-zarr group.</p> </li> <li> <code>PlateWell</code>           \u2013            <p>Individual well in a plate.</p> </li> <li> <code>Well</code>           \u2013            <p>A well at the top-level of an ome-zarr file.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>OMEMetadata</code>               (<code>TypeAlias</code>)           \u2013            <p>Anything that can live in the \"ome\" key of a v0.5 ome-zarr file.</p> </li> </ul>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.OMEMetadata","title":"OMEMetadata  <code>module-attribute</code>","text":"<pre><code>OMEMetadata: TypeAlias = Annotated[\n    Annotated[LabelImage, Tag(\"label-image\")]\n    | Annotated[Image, Tag(\"image\")]\n    | Annotated[Plate, Tag(\"plate\")]\n    | Annotated[Bf2Raw, Tag(\"bf2raw\")]\n    | Annotated[Well, Tag(\"well\")]\n    | Annotated[LabelsGroup, Tag(\"labels-group\")]\n    | Annotated[Series, Tag(\"series\")],\n    Discriminator(_discriminate_ome_v4_metadata),\n]\n</code></pre> <p>Anything that can live in the \"ome\" key of a v0.5 ome-zarr file.</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.Dataset","title":"Dataset","text":"<p>               Bases: <code>_BaseModel</code></p> <p>Attributes:</p> <ul> <li> <code>scale_transform</code>               (<code>ScaleTransformation</code>)           \u2013            <p>Return the scale transformation from the list.</p> </li> </ul>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.Dataset.scale_transform","title":"scale_transform  <code>property</code>","text":"<pre><code>scale_transform: ScaleTransformation\n</code></pre> <p>Return the scale transformation from the list.</p> <p>(CoordinateTransformsList validator ensures there is exactly one.)</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.LabelImage","title":"LabelImage","text":"<p>               Bases: <code>Image</code></p> <p>Model for individual label images with multiscales + image-label metadata.</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.LabelsGroup","title":"LabelsGroup","text":"<p>               Bases: <code>_BaseModel</code></p> <p>Model for the labels group that contains paths to individual label images.</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.Multiscale","title":"Multiscale","text":"<p>               Bases: <code>_BaseModel</code></p> <p>A multiscale representation of an image.</p> Notes <p>Additional constraints that are not verifiable without I/O:</p> <ul> <li>The length of \"axes\" MUST be equal to the dimensionality of the zarr arrays   storing the image data (see <code>datasets.path</code>).</li> <li>The \"dimension_names\" attribute MUST be included in the zarr.json of the Zarr   array of a multiscale level and MUST match the names in the \"axes\" metadata.</li> <li>The order of axes in \"axes\" MUST match the order of dimensions in the zarr arrays.</li> <li>The \"paths\" of the datasets MUST be be ordered from the highest resolution to the   lowest resolution (i.e. largest to smallest)</li> </ul>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.OMEAttributes","title":"OMEAttributes","text":"<p>               Bases: <code>_BaseModel</code></p> <p>The attributes field of a zarr.json document in an ome-zarr group.</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.OMEZarrGroupJSON","title":"OMEZarrGroupJSON","text":"<p>               Bases: <code>ZarrGroupModel</code></p> <p>A zarr.json document found in any ome-zarr group.</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.PlateWell","title":"PlateWell","text":"<p>               Bases: <code>_BaseModel</code></p> <p>Individual well in a plate.</p>"},{"location":"reference/yaozarrs/v05/#yaozarrs.v05.Well","title":"Well","text":"<p>               Bases: <code>_BaseModel</code></p> <p>A well at the top-level of an ome-zarr file.</p>"}]}